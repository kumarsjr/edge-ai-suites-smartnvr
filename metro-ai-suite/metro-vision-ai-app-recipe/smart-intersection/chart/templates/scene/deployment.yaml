apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-scene
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-scene
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-scene
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-scene
    spec:
      initContainers:
      - name: wait-for-db-ready
        image: "{{ .Values.images.curl.repository }}:{{ .Values.images.curl.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
          - name: http_proxy
            value: {{ .Values.http_proxy | quote }}
          - name: https_proxy
            value: {{ .Values.https_proxy | quote }}
          - name: no_proxy
            value: "{{ .Values.no_proxy }},influxdb2, ntpserv,smart-intersection-broker,smart-intersection-dlstreamer-pipeline-server,smart-intersection-grafana,smart-intersection-nodered,smart-intersection-pgserver,smart-intersection-scene,smart-intersection-web"
        command:
          - sh
          - -c
          - |
            {{- tpl (include "scene.wait-for-db-script" .) . | nindent 12 }}
      # initContainers:
      # - name: init-scene-secrets
      #   image: busybox
      #   command: ['sh', '-c', '
      #     if [ -f /data/secrets.py ]; then
      #       echo "File exists: /data/secrets.py";
      #     else
      #       echo "File does NOT exist: /data/secrets.py";
      #     fi &&
      #     until [ -f /data/.done ]; do
      #       echo "Waiting for .done ...";
      #       sleep 5;
      #     done &&
      #     echo "secrets.py copied to /tmp/secrets/django";
      #   ']
      #   volumeMounts:
      #   - name: scene-secrets-data
      #     mountPath: /data
      containers:
      - name: scene
        image: {{ .Values.scene.repository }}:{{ .Values.scene.tag }}
        imagePullPolicy: IfNotPresent
        env:
          - name: http_proxy
            value: {{ .Values.http_proxy | quote }}
          - name: https_proxy
            value: {{ .Values.https_proxy | quote }}
          - name: no_proxy
            value: "{{ .Values.no_proxy }},influxdb2, ntpserv,smart-intersection-broker,smart-intersection-dlstreamer-pipeline-server,smart-intersection-grafana,smart-intersection-nodered,smart-intersection-pgserver,smart-intersection-scene,smart-intersection-web"
        command: ["/bin/bash", "-e", "-c"]
        args:
        - >
          {{- tpl (include "scene.startup-script" .) . | nindent 10 }}
        volumeMounts:
        - name: pgserver-media
          mountPath: /home/scenescape/SceneScape/media
        - name: tracker-config
          mountPath: /home/scenescape/SceneScape/tracker-config.json
          subPath: tracker-config.json
        - name: secrets
          mountPath: /tmp/secrets_
        - name: scene-secrets-data
          mountPath: /data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          readOnlyRootFilesystem: false
        env:
        - name: CONTROLLER_AUTH
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-scene-secrets
              key: controller.auth
      volumes:
      - name: pgserver-media
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pgserver-media
      - name: tracker-config
        configMap:
          name: {{ .Release.Name }}-scene-config
      - name: secrets
        secret:
          secretName: {{ .Release.Name }}-scene-secrets
      - name: scene-secrets-data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-scene-secrets-pvc
