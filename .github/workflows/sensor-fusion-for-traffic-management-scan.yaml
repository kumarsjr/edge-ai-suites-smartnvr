
---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "[TFCC] SDLe Scans - Scan Trivy Bandit Coverity"
run-name: "[TFCC] SDLe Scans - SScan Trivy Bandit Coverity"


# Only run at most 1 workflow concurrently per PR, unlimited for branches
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  workflow_call:
  workflow_dispatch:
  
permissions:
  contents: read
  
jobs:
  bandit-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Run Bandit Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/bandit@27276444a9bcf247a27369406686b689933bd1ff
        id: bandit
        with:
          scan-scope: "all"  
          output-format: "txt" 
          fail-on-findings: "false" 
          
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: bandit-report
          path: security-results/bandit*
          
  trivy-scan:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          path: edge-ai-suites-repo
          persist-credentials: false
          
      - name: Run Trivy Filesystem Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: trivy-fs
        with:
          scan_type: "fs"  
          scan-scope: "all"  
          scan-target: "edge-ai-suites-repo/metro-ai-suite/sensor-fusion-for-traffic-management"
          severity: "HIGH,CRITICAL" 
          format: "json"  

      - name: Build Docker images
        run: |
          ls
          cd edge-ai-suites-repo/metro-ai-suite/sensor-fusion-for-traffic-management/docker
          bash build_docker.sh
          TFCC_IMAGE_ID=$(docker images -q tfcc)
          docker images --format '{{.ID}} {{.Repository}}' | \
            awk -v keep="$TFCC_IMAGE_ID" '$1 != keep {print $1}' | \
            xargs --no-run-if-empty docker rmi -f
          docker system prune -f
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash

      - name: Free disk space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: true  
          android: true      
          dotnet: true  
          haskell: true  
          large-packages: true 
          docker-images: false
          swap-storage: true 
          
      - name: Check resources
        run: |
          df -h
          docker images
      - name: Run trivy Scan - tfcc
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: tfccsample
        with:
          scan_type: "image"  
          scan-scope: all
          scan_target: "tfcc:latest"  
          severity: "HIGH,CRITICAL"  
          format: "json"  
          
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: trivy-report
          path: security-results/trivy

  coverity-scan:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - name: Free disk space
        run: curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
        
      - name: Check out edge-ai-libraries repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
        with:
          persist-credentials: false   
          
      - name: Build code manually for TFCC
        run: |
          ls
          sudo apt update
          sudo apt install -y libunwind-dev
          sudo apt-get install -y make automake libtool flex bison g++
          cd metro-ai-suite/sensor-fusion-for-traffic-management
          bash scan_install_project_related_libs.sh
          export PROJ_DIR=$PWD
          sudo ln -s $PROJ_DIR/ai_inference/deployment/datasets /opt/datasets
          sudo ln -s $PROJ_DIR/ai_inference/deployment/models /opt/models
          sudo cp $PROJ_DIR/ai_inference/deployment/datasets/radarResults.csv /opt

      - name: Build with Coverity Analysis
        run: |
          wget --quiet https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.TFCC_COVERITY_TOKEN }}&project=${{ secrets.TFCC_COVERITY_PROJECT }}" \
            -O coverity_tool.tgz
          mkdir cov-analysis
          tar xzf coverity_tool.tgz --strip-components=1 -C cov-analysis
          COV_PATH="$(pwd)/cov-analysis/bin"  
          ls
          cd metro-ai-suite/sensor-fusion-for-traffic-management
          $COV_PATH/cov-build --dir cov-int bash -x build.sh

      - name: Create tarball for upload
        run: |
          cd metro-ai-suite/sensor-fusion-for-traffic-management
          tar -czvf coverity_output.tgz -C . cov-int
          # Verify tarball contents
          echo "=== Tarball Contents ==="
          tar tzvf coverity_output.tgz
          echo "=== head ==="
          tar -tzvf coverity_output.tgz | head
          
      - name: Upload to Coverity Scan
        run: |
          cd metro-ai-suite/sensor-fusion-for-traffic-management
          curl --form token=${{ secrets.TFCC_COVERITY_TOKEN }} \
               --form email=${{ secrets.TFCC_COVERITY_EMAIL }} \
               --form file=@coverity_output.tgz \
               --form version="`date +%Y%m%d%H%M%S`" \
               --form description="GitHub Action upload" \
               https://scan.coverity.com/builds?project=${{ secrets.TFCC_COVERITY_PROJECT }}
